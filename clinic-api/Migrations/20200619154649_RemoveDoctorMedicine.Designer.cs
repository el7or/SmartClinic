// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using clinic_api.Data;

namespace clinic_api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200619154649_RemoveDoctorMedicine")]
    partial class RemoveDoctorMedicine
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("clinic_api.Data.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("clinic_api.Data.ApplicationRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("clinic_api.Data.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EditedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("clinic_api.Data.ApplicationUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("clinic_api.Data.ApplicationUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("clinic_api.Data.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("clinic_api.Data.ApplicationUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("clinic_api.Models.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AttendanceTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("BookingDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CanceledOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("DaySeqNo")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("EntryTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FinishTime")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAttend")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEnter")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsFinish")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("TypeId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("clinic_api.Models.BookingPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextPaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingPayments");
                });

            modelBuilder.Entity("clinic_api.Models.BookingService", b =>
                {
                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("BookingId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("BookingServices");
                });

            modelBuilder.Entity("clinic_api.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReadOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("clinic_api.Models.Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AllDaysTimeFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("AllDaysTimeTo")
                        .HasColumnType("datetime");

                    b.Property<int?>("BookingPeriod")
                        .HasColumnType("int");

                    b.Property<string>("ClinicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ConsultExpiration")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("EntryOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FridayTimeFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FridayTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAllDaysOn")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAllDaysSameTime")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MondayTimeFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("MondayTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("PrintAddress1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintAddress2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintAddress3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintClinicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintDoctorDegree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintDoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintLogoPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrintPhone1")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PrintPhone2")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PrintPhone3")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime?>("SaturdayTimeFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SaturdayTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SundayTimeFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SundayTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ThursdayTimeFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ThursdayTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TuesdayTimeFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TuesdayTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("WednesdayTimeFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("WednesdayTimeTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("WorkDays")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("EntryOrderId");

                    b.ToTable("Clinics");
                });

            modelBuilder.Entity("clinic_api.Models.ClinicBookingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicBookingTypes");
                });

            modelBuilder.Entity("clinic_api.Models.ClinicDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Discount")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPercent")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicDiscounts");
                });

            modelBuilder.Entity("clinic_api.Models.ClinicService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ClinicId");

                    b.ToTable("ClinicServices");
                });

            modelBuilder.Entity("clinic_api.Models.ClinicUser", b =>
                {
                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClinicId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ClinicUsers");
                });

            modelBuilder.Entity("clinic_api.Models.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("DiseasesQuestions")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email1")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Email2")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instagram")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PatientRecordSections")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Phone3")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("int");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorAnalysisValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnalysisName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorAnalysisValues");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorClinic", b =>
                {
                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorId", "ClinicId");

                    b.HasIndex("ClinicId");

                    b.ToTable("DoctorClinics");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorComplaintChoicesValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Choice")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DetailedComplaintId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DetailedComplaintId");

                    b.ToTable("DoctorComplaintChoicesValues");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorDetailedComplaintsValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Complaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDetailedComplaintsValues");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorDiagnosisValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorDiagnosisValues");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorExaminationAreasValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExaminationArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorExaminationAreasValues");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorExaminationsValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Examination")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorExaminationsValues");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorExpense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExpenseItemId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("ExpenseItemId");

                    b.ToTable("DoctorExpenses");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorExpenseItemValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExpenseItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorExpenseItems");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorGeneralComplaintsValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Complaint")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorGeneralComplaintsValues");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorOperationTypesValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OperationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorOperationTypesValues");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorRayAreasValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RayArea")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorRayAreasValues");
                });

            modelBuilder.Entity("clinic_api.Models.DoctorRaysValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorRaysValues");
                });

            modelBuilder.Entity("clinic_api.Models.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ExpenseCost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ExpenseTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseTypeId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("clinic_api.Models.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<int?>("BloodPressureId")
                        .HasColumnType("int");

                    b.Property<decimal?>("BodyMass")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Career")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Children")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<Guid>("ClinicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FamilyHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit");

                    b.Property<int?>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Length")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("PrevMarriages")
                        .HasColumnType("int");

                    b.Property<int?>("PrevMarriagesPartner")
                        .HasColumnType("int");

                    b.Property<int>("SeqNo")
                        .HasColumnType("int");

                    b.Property<int?>("SocialStatusId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("TreatmentHistory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("BloodPressureId");

                    b.HasIndex("CityId");

                    b.HasIndex("ClinicId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("SocialStatusId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("clinic_api.Models.PatientAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AnalysisId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHasResult")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RequestNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ResultGradeId")
                        .HasColumnType("int");

                    b.Property<string>("ResultNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AnalysisId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ResultGradeId");

                    b.ToTable("PatientAnalysis");
                });

            modelBuilder.Entity("clinic_api.Models.PatientAnalysisFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientAnalysisId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("PatientAnalysisId");

                    b.ToTable("PatientAnalysisFiles");
                });

            modelBuilder.Entity("clinic_api.Models.PatientDetailedComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ComplaintChoiceId")
                        .HasColumnType("int");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DetailedComplaintId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Period")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ComplaintChoiceId");

                    b.HasIndex("DetailedComplaintId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientDetailedComplaints");
                });

            modelBuilder.Entity("clinic_api.Models.PatientDiagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DiagnosisId")
                        .HasColumnType("int");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosisId");

                    b.HasIndex("GradeId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientDiagnosis");
                });

            modelBuilder.Entity("clinic_api.Models.PatientDisease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientDiseases");
                });

            modelBuilder.Entity("clinic_api.Models.PatientExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ExaminationAreaId")
                        .HasColumnType("int");

                    b.Property<int>("ExaminationId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ExaminationAreaId");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientExaminations");
                });

            modelBuilder.Entity("clinic_api.Models.PatientGeneralComplaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("GeneralComplaintId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("GeneralComplaintId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientGeneralComplaints");
                });

            modelBuilder.Entity("clinic_api.Models.PatientOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OperationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("OperationTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Place")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("OperationTypeId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientOperations");
                });

            modelBuilder.Entity("clinic_api.Models.PatientPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsPrint")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientPrescriptions");
                });

            modelBuilder.Entity("clinic_api.Models.PatientRay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsHasResult")
                        .HasColumnType("bit");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("RayAreaId")
                        .HasColumnType("int");

                    b.Property<int>("RayId")
                        .HasColumnType("int");

                    b.Property<string>("RequestNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("ResultGradeId")
                        .HasColumnType("int");

                    b.Property<string>("ResultNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResultText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.HasIndex("RayAreaId");

                    b.HasIndex("RayId");

                    b.HasIndex("ResultGradeId");

                    b.ToTable("PatientRays");
                });

            modelBuilder.Entity("clinic_api.Models.PatientRayFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PatientRayId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlPublicId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("PatientRayId");

                    b.ToTable("PatientRayFiles");
                });

            modelBuilder.Entity("clinic_api.Models.PatientReferral", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CanceledOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PatientDiagnosisId")
                        .HasColumnType("int");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReadOn")
                        .HasColumnType("datetime");

                    b.Property<Guid>("ReferralToDoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PatientDiagnosisId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReferralToDoctorId");

                    b.ToTable("PatientReferrals");
                });

            modelBuilder.Entity("clinic_api.Models.Plan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AnnualRenewalFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GracePeriodDays")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxBookingsMonthly")
                        .HasColumnType("int");

                    b.Property<int?>("MaxFileSizeMB")
                        .HasColumnType("int");

                    b.Property<int?>("MaxFilesMonthlyMB")
                        .HasColumnType("int");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonthlyRenewalFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("RenewalTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SignUpFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("RenewalTypeId");

                    b.ToTable("Plans");
                });

            modelBuilder.Entity("clinic_api.Models.PrescriptionMedicine", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("MedicineId")
                        .HasColumnType("int");

                    b.Property<int?>("DoseId")
                        .HasColumnType("int");

                    b.Property<int?>("PeriodId")
                        .HasColumnType("int");

                    b.Property<int?>("QuantityId")
                        .HasColumnType("int");

                    b.Property<int?>("TimingId")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionId", "MedicineId");

                    b.HasIndex("DoseId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("QuantityId");

                    b.HasIndex("TimingId");

                    b.ToTable("PrescriptionMedicines");
                });

            modelBuilder.Entity("clinic_api.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AnnualRenewalFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("GracePeriodDays")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MaxBookingsMonthly")
                        .HasColumnType("int");

                    b.Property<int?>("MaxFileSizeMB")
                        .HasColumnType("int");

                    b.Property<int?>("MaxFilesMonthlyMB")
                        .HasColumnType("int");

                    b.Property<int?>("MaxUsers")
                        .HasColumnType("int");

                    b.Property<decimal?>("MonthlyRenewalFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PlanId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SignUpFee")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<Guid>("SubscriberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SubscriberTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SubscriptionTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("SubscriberTypeId");

                    b.HasIndex("SubscriptionTypeId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("clinic_api.Models.SubscriptionPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("NextPaymentDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionPayments");
                });

            modelBuilder.Entity("clinic_api.Models.SysAnalysisFileTypesValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysAnalysisFileTypesValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysBloodPressureValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysBloodPressureValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysCitiesValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GovId")
                        .HasColumnType("int");

                    b.Property<string>("TextAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("TextEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("GovId");

                    b.ToTable("SysCitiesValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysDiseaseGradesValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysDiseaseGradesValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysDiseasesQuestionsValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SysDiseasesQuestionsValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysDoctorsSpecialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysDoctorsSpecialties");
                });

            modelBuilder.Entity("clinic_api.Models.SysEntryOrderValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysEntryOrderValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysExpenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysExpenseTypes");
                });

            modelBuilder.Entity("clinic_api.Models.SysGovernoratesValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TextAR")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("TextEN")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysGovernoratesValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysMedicineDosesValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysMedicineDosesValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysMedicinePeriodsValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysMedicinePeriodsValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysMedicineQuantityValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysMedicineQuantityValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysMedicineTimingsValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysMedicineTimingsValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysMedicinesValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysMedicinesValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysPatientRecordSectionsValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysPatientRecordSectionsValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysRayFileTypesValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysRayFileTypesValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysRenewalTypeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysRenewalTypeValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysSocialStatusValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysSocialStatusValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysSubscriberTypeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysSubscriberTypeValues");
                });

            modelBuilder.Entity("clinic_api.Models.SysSubscriptionTypeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.ToTable("SysSubscriptionTypeValues");
                });

            modelBuilder.Entity("clinic_api.Data.ApplicationRoleClaim", b =>
                {
                    b.HasOne("clinic_api.Data.ApplicationRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Data.ApplicationUserClaim", b =>
                {
                    b.HasOne("clinic_api.Data.ApplicationUser", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Data.ApplicationUserLogin", b =>
                {
                    b.HasOne("clinic_api.Data.ApplicationUser", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Data.ApplicationUserRole", b =>
                {
                    b.HasOne("clinic_api.Data.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clinic_api.Data.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Data.ApplicationUserToken", b =>
                {
                    b.HasOne("clinic_api.Data.ApplicationUser", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.Booking", b =>
                {
                    b.HasOne("clinic_api.Models.ClinicDiscount", "Discount")
                        .WithMany("Bookings")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("FK_Bookings_ClinicDiscounts");

                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("Bookings")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_Bookings_Doctors")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.Patient", "Patient")
                        .WithMany("Bookings")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_Bookings_Patients")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.ClinicBookingType", "Type")
                        .WithMany("Bookings")
                        .HasForeignKey("TypeId")
                        .HasConstraintName("FK_Bookings_ClinicBookingTypes")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.BookingPayment", b =>
                {
                    b.HasOne("clinic_api.Models.Booking", "Booking")
                        .WithMany("BookingPayments")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_BookingPayments_Bookings")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.BookingService", b =>
                {
                    b.HasOne("clinic_api.Models.Booking", "Booking")
                        .WithMany("BookingServices")
                        .HasForeignKey("BookingId")
                        .HasConstraintName("FK_BookingServices_Bookings")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.ClinicService", "Service")
                        .WithMany("BookingServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_BookingServices_ClinicServices")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.ChatMessage", b =>
                {
                    b.HasOne("clinic_api.Data.ApplicationUser", "Receiver")
                        .WithMany("MessagesReceived")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK_MessagesReceived_AspNetUsers")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("clinic_api.Data.ApplicationUser", "Sender")
                        .WithMany("MessagesSent")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_MessagesSent_AspNetUsers")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.Clinic", b =>
                {
                    b.HasOne("clinic_api.Models.SysEntryOrderValue", "EntryOrder")
                        .WithMany("Clinics")
                        .HasForeignKey("EntryOrderId")
                        .HasConstraintName("FK_Clinics_SysEntryOrderValues");
                });

            modelBuilder.Entity("clinic_api.Models.ClinicBookingType", b =>
                {
                    b.HasOne("clinic_api.Models.Clinic", "Clinic")
                        .WithMany("ClinicBookingTypes")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("FK_ClinicBookingTypes_Clinics")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.ClinicDiscount", b =>
                {
                    b.HasOne("clinic_api.Models.Clinic", "Clinic")
                        .WithMany("ClinicDiscounts")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("FK_ClinicDiscounts_Clinics")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.ClinicService", b =>
                {
                    b.HasOne("clinic_api.Models.Clinic", "Clinic")
                        .WithMany("ClinicServices")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("FK_ClinicServices_Clinics")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.ClinicUser", b =>
                {
                    b.HasOne("clinic_api.Models.Clinic", "Clinic")
                        .WithMany("ClinicUsers")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("FK_ClinicUsers_Clinics")
                        .IsRequired();

                    b.HasOne("clinic_api.Data.ApplicationUser", "User")
                        .WithMany("ClinicUsers")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_ClinicUsers_AspNetUsers")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.Doctor", b =>
                {
                    b.HasOne("clinic_api.Models.SysDoctorsSpecialty", "Specialty")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecialtyId")
                        .HasConstraintName("FK_Doctors_SysDoctorsSpecialties")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorAnalysisValue", b =>
                {
                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorAnalysisValues")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorAnalysisValues_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorClinic", b =>
                {
                    b.HasOne("clinic_api.Models.Clinic", "Clinic")
                        .WithMany("DoctorClinics")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("FK_DoctorClinics_Clinics")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorClinics")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorClinics_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorComplaintChoicesValue", b =>
                {
                    b.HasOne("clinic_api.Models.DoctorDetailedComplaintsValue", "DetailedComplaint")
                        .WithMany("DoctorComplaintChoicesValues")
                        .HasForeignKey("DetailedComplaintId")
                        .HasConstraintName("FK_DoctorComplaintChoicesValues_DoctorDetailedComplaintsValues")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorDetailedComplaintsValue", b =>
                {
                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorDetailedComplaintsValues")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorDetailedComplaintsValues_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorDiagnosisValue", b =>
                {
                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorDiagnosisValues")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorDiagnosisValues_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorExaminationAreasValue", b =>
                {
                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorExaminationAreasValues")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorExaminationAreasValues_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorExaminationsValue", b =>
                {
                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorExaminationsValues")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorExaminationsValues_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorExpense", b =>
                {
                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorExpenses")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorExpenses_Doctors")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.DoctorExpenseItemValue", "ExpenseItem")
                        .WithMany("DoctorExpenses")
                        .HasForeignKey("ExpenseItemId")
                        .HasConstraintName("FK_DoctorExpenses_DoctorExpenseItems")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorExpenseItemValue", b =>
                {
                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorExpenseItems")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorExpenseItems_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorGeneralComplaintsValue", b =>
                {
                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorGeneralComplaintsValues")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorGeneralComplaintsValues_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorOperationTypesValue", b =>
                {
                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorOperationTypesValues")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorOperationTypesValues_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorRayAreasValue", b =>
                {
                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorRayAreasValues")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorRayAreas_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.DoctorRaysValue", b =>
                {
                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("DoctorRaysValues")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_DoctorRaysValues_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.Expense", b =>
                {
                    b.HasOne("clinic_api.Models.SysExpenseType", "ExpenseType")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseTypeId")
                        .HasConstraintName("FK_Expenses_SysExpenseTypes")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.Patient", b =>
                {
                    b.HasOne("clinic_api.Models.SysBloodPressureValue", "BloodPressure")
                        .WithMany("Patients")
                        .HasForeignKey("BloodPressureId")
                        .HasConstraintName("FK_Patients_SysBloodPressureValues");

                    b.HasOne("clinic_api.Models.SysCitiesValue", "City")
                        .WithMany("Patients")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Patients_SysCitiesValues");

                    b.HasOne("clinic_api.Models.Clinic", "Clinic")
                        .WithMany("Patients")
                        .HasForeignKey("ClinicId")
                        .HasConstraintName("FK_Patients_Clinics")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.Doctor", "Doctor")
                        .WithMany("Patients")
                        .HasForeignKey("DoctorId")
                        .HasConstraintName("FK_Patients_Doctors")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.SysGovernoratesValue", "Governorate")
                        .WithMany("Patients")
                        .HasForeignKey("GovernorateId")
                        .HasConstraintName("FK_Patients_SysGovernoratesValues");

                    b.HasOne("clinic_api.Models.SysSocialStatusValue", "SocialStatus")
                        .WithMany("Patients")
                        .HasForeignKey("SocialStatusId")
                        .HasConstraintName("FK_Patients_SysSocialStatusValues");
                });

            modelBuilder.Entity("clinic_api.Models.PatientAnalysis", b =>
                {
                    b.HasOne("clinic_api.Models.DoctorAnalysisValue", "Analysis")
                        .WithMany("PatientAnalysis")
                        .HasForeignKey("AnalysisId")
                        .HasConstraintName("FK_PatientAnalysis_DoctorAnalysisValues")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.Patient", "Patient")
                        .WithMany("PatientAnalysis")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientAnalysis_Patients")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.SysDiseaseGradesValue", "ResultGrade")
                        .WithMany("PatientAnalysis")
                        .HasForeignKey("ResultGradeId")
                        .HasConstraintName("FK_PatientAnalysis_SysDiseaseGradesValues");
                });

            modelBuilder.Entity("clinic_api.Models.PatientAnalysisFile", b =>
                {
                    b.HasOne("clinic_api.Models.SysAnalysisFileTypesValue", "FileType")
                        .WithMany("PatientAnalysisFiles")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_PatientAnalysisFiles_SysAnalysisFileTypesValues")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.PatientAnalysis", "PatientAnalysis")
                        .WithMany("PatientAnalysisFiles")
                        .HasForeignKey("PatientAnalysisId")
                        .HasConstraintName("FK_PatientAnalysisFiles_PatientAnalysis")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.PatientDetailedComplaint", b =>
                {
                    b.HasOne("clinic_api.Models.DoctorComplaintChoicesValue", "ComplaintChoice")
                        .WithMany("PatientDetailedComplaints")
                        .HasForeignKey("ComplaintChoiceId")
                        .HasConstraintName("FK_PatientDetailedComplaints_DoctorComplaintChoicesValues");

                    b.HasOne("clinic_api.Models.DoctorDetailedComplaintsValue", "DetailedComplaint")
                        .WithMany("PatientDetailedComplaints")
                        .HasForeignKey("DetailedComplaintId")
                        .HasConstraintName("FK_PatientDetailedComplaints_DoctorDetailedComplaintsValues")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.Patient", "Patient")
                        .WithMany("PatientDetailedComplaints")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientDetailedComplaints_Patients")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.PatientDiagnosis", b =>
                {
                    b.HasOne("clinic_api.Models.DoctorDiagnosisValue", "Diagnosis")
                        .WithMany("PatientDiagnosis")
                        .HasForeignKey("DiagnosisId")
                        .HasConstraintName("FK_PatientDiagnosis_DoctorDiagnosisValues")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.SysDiseaseGradesValue", "Grade")
                        .WithMany("PatientDiagnosis")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_PatientDiagnosis_SysDiseaseGradesValues");

                    b.HasOne("clinic_api.Models.Patient", "Patient")
                        .WithMany("PatientDiagnosis")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientDiagnosis_Patients")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.PatientDisease", b =>
                {
                    b.HasOne("clinic_api.Models.SysDiseasesQuestionsValue", "Disease")
                        .WithMany("PatientDiseases")
                        .HasForeignKey("DiseaseId")
                        .HasConstraintName("FK_PatientDiseases_SysDiseasesQuestionsValues")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.Patient", "Patient")
                        .WithMany("PatientDiseases")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientDiseases_Patients")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.PatientExamination", b =>
                {
                    b.HasOne("clinic_api.Models.DoctorExaminationAreasValue", "ExaminationArea")
                        .WithMany("PatientExaminations")
                        .HasForeignKey("ExaminationAreaId")
                        .HasConstraintName("FK_PatientExaminations_DoctorExaminationAreasValues");

                    b.HasOne("clinic_api.Models.DoctorExaminationsValue", "Examination")
                        .WithMany("PatientExaminations")
                        .HasForeignKey("ExaminationId")
                        .HasConstraintName("FK_PatientExaminations_DoctorExaminationsValues")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.Patient", "Patient")
                        .WithMany("PatientExaminations")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientExaminations_Patients")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.PatientGeneralComplaint", b =>
                {
                    b.HasOne("clinic_api.Models.DoctorGeneralComplaintsValue", "GeneralComplaint")
                        .WithMany("PatientGeneralComplaints")
                        .HasForeignKey("GeneralComplaintId")
                        .HasConstraintName("FK_PatientGeneralComplaints_DoctorGeneralComplaintsValues")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.Patient", "Patient")
                        .WithMany("PatientGeneralComplaints")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientGeneralComplaints_Patients")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.PatientOperation", b =>
                {
                    b.HasOne("clinic_api.Models.DoctorOperationTypesValue", "OperationType")
                        .WithMany("PatientOperations")
                        .HasForeignKey("OperationTypeId")
                        .HasConstraintName("FK_PatientOperations_DoctorOperationTypesValues")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.Patient", "Patient")
                        .WithMany("PatientOperations")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientOperations_Patients")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.PatientPrescription", b =>
                {
                    b.HasOne("clinic_api.Models.Patient", "Patient")
                        .WithMany("PatientPrescriptions")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientPrescriptions_Patients")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.PatientRay", b =>
                {
                    b.HasOne("clinic_api.Models.Patient", "Patient")
                        .WithMany("PatientRays")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientRays_Patients")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.DoctorRayAreasValue", "RayArea")
                        .WithMany("PatientRays")
                        .HasForeignKey("RayAreaId")
                        .HasConstraintName("FK_PatientRays_DoctorRayAreas");

                    b.HasOne("clinic_api.Models.DoctorRaysValue", "Ray")
                        .WithMany("PatientRays")
                        .HasForeignKey("RayId")
                        .HasConstraintName("FK_PatientRays_DoctorRaysValues")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.SysDiseaseGradesValue", "ResultGrade")
                        .WithMany("PatientRays")
                        .HasForeignKey("ResultGradeId")
                        .HasConstraintName("FK_PatientRays_SysDiseaseGradesValues");
                });

            modelBuilder.Entity("clinic_api.Models.PatientRayFile", b =>
                {
                    b.HasOne("clinic_api.Models.SysRayFileTypesValue", "FileType")
                        .WithMany("PatientRayFiles")
                        .HasForeignKey("FileTypeId")
                        .HasConstraintName("FK_PatientRayFiles_SysRayFileTypesValues")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.PatientRay", "PatientRay")
                        .WithMany("PatientRayFiles")
                        .HasForeignKey("PatientRayId")
                        .HasConstraintName("FK_PatientRayFiles_PatientRays")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.PatientReferral", b =>
                {
                    b.HasOne("clinic_api.Models.PatientDiagnosis", "PatientDiagnosis")
                        .WithMany("PatientReferrals")
                        .HasForeignKey("PatientDiagnosisId")
                        .HasConstraintName("FK_PatientReferrals_PatientDiagnosis");

                    b.HasOne("clinic_api.Models.Patient", "Patient")
                        .WithMany("PatientReferrals")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("FK_PatientReferrals_Patients")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.Doctor", "ReferralToDoctor")
                        .WithMany("PatientReferrals")
                        .HasForeignKey("ReferralToDoctorId")
                        .HasConstraintName("FK_PatientReferrals_Doctors")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.Plan", b =>
                {
                    b.HasOne("clinic_api.Models.SysRenewalTypeValue", "RenewalType")
                        .WithMany("Plans")
                        .HasForeignKey("RenewalTypeId")
                        .HasConstraintName("FK_Plans_SysRenewalTypeValues");
                });

            modelBuilder.Entity("clinic_api.Models.PrescriptionMedicine", b =>
                {
                    b.HasOne("clinic_api.Models.SysMedicineDosesValue", "Dose")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("DoseId")
                        .HasConstraintName("FK_PrescriptionMedicines_SysMedicineDosesValues");

                    b.HasOne("clinic_api.Models.SysMedicinesValue", "Medicine")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("MedicineId")
                        .HasConstraintName("FK_PrescriptionMedicines_SysMedicinesValue")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.SysMedicinePeriodsValue", "Period")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("PeriodId")
                        .HasConstraintName("FK_PrescriptionMedicines_SysMedicinePeriodsValues");

                    b.HasOne("clinic_api.Models.PatientPrescription", "Prescription")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("clinic_api.Models.SysMedicineQuantityValue", "Quantity")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("QuantityId")
                        .HasConstraintName("FK_PrescriptionMedicines_SysMedicineQuantityValues");

                    b.HasOne("clinic_api.Models.SysMedicineTimingsValue", "Timing")
                        .WithMany("PrescriptionMedicines")
                        .HasForeignKey("TimingId")
                        .HasConstraintName("FK_PrescriptionMedicines_SysMedicineTimingsValues");
                });

            modelBuilder.Entity("clinic_api.Models.Subscription", b =>
                {
                    b.HasOne("clinic_api.Models.Plan", "Plan")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PlanId")
                        .HasConstraintName("FK_Subscriptions_Plans")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.SysSubscriberTypeValue", "SubscriberType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriberTypeId")
                        .HasConstraintName("FK_Subscriptions_SysSubscriberTypeValues")
                        .IsRequired();

                    b.HasOne("clinic_api.Models.SysSubscriptionTypeValue", "SubscriptionType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SubscriptionTypeId")
                        .HasConstraintName("FK_Subscriptions_SysSubscriptionTypeValues");
                });

            modelBuilder.Entity("clinic_api.Models.SubscriptionPayment", b =>
                {
                    b.HasOne("clinic_api.Models.Subscription", "Subscription")
                        .WithMany("SubscriptionPayments")
                        .HasForeignKey("SubscriptionId")
                        .HasConstraintName("FK_SubscriptionPayments_Subscriptions")
                        .IsRequired();
                });

            modelBuilder.Entity("clinic_api.Models.SysCitiesValue", b =>
                {
                    b.HasOne("clinic_api.Models.SysGovernoratesValue", "Gov")
                        .WithMany("SysCitiesValues")
                        .HasForeignKey("GovId")
                        .HasConstraintName("FK_SysCitiesValues_SysGovernoratesValues")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
